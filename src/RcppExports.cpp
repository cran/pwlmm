// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// invvech_eigen
Eigen::MatrixXd invvech_eigen(const Eigen::VectorXd& x);
RcppExport SEXP _pwlmm_invvech_eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(invvech_eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// blkdiag
Eigen::MatrixXd blkdiag(const Eigen::MatrixXd& a, int count);
RcppExport SEXP _pwlmm_blkdiag(SEXP aSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(blkdiag(a, count));
    return rcpp_result_gen;
END_RCPP
}
// initial_beta
Rcpp::List initial_beta(int nvar, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, int ncluster, const Eigen::MatrixXd& panelsetup2, const Eigen::VectorXd& wi_j_star, const Eigen::VectorXd& wj_star);
RcppExport SEXP _pwlmm_initial_beta(SEXP nvarSEXP, SEXP xSEXP, SEXP ySEXP, SEXP nclusterSEXP, SEXP panelsetup2SEXP, SEXP wi_j_starSEXP, SEXP wj_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup2(panelsetup2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_beta(nvar, x, y, ncluster, panelsetup2, wi_j_star, wj_star));
    return rcpp_result_gen;
END_RCPP
}
// iterative_multi_beta
Rcpp::List iterative_multi_beta(int nvar, int ncluster, const Eigen::MatrixXd& panelsetup2, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, const Eigen::VectorXd& z, const Eigen::VectorXd& wi_j_star, const Eigen::VectorXd& wj_star, const Eigen::MatrixXd& theta, int tt, const Eigen::MatrixXd& theta_genlin);
RcppExport SEXP _pwlmm_iterative_multi_beta(SEXP nvarSEXP, SEXP nclusterSEXP, SEXP panelsetup2SEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP wi_j_starSEXP, SEXP wj_starSEXP, SEXP thetaSEXP, SEXP ttSEXP, SEXP theta_genlinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup2(panelsetup2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type theta_genlin(theta_genlinSEXP);
    rcpp_result_gen = Rcpp::wrap(iterative_multi_beta(nvar, ncluster, panelsetup2, x, y, z, wi_j_star, wj_star, theta, tt, theta_genlin));
    return rcpp_result_gen;
END_RCPP
}
// iterative_multi_theta
Rcpp::List iterative_multi_theta(int ncluster, const Eigen::VectorXd& beta, const Eigen::MatrixXd& panelsetup2, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, const Eigen::VectorXd& wi_j_star, const Eigen::VectorXd& inv_wi_j_star, const Eigen::VectorXd& wj_star, int tt, const std::vector<Eigen::MatrixXd>& DELTA, const std::vector<Eigen::MatrixXd>& invvjs, const Eigen::VectorXd& h_matrix, int s, int ss, int nvar);
RcppExport SEXP _pwlmm_iterative_multi_theta(SEXP nclusterSEXP, SEXP betaSEXP, SEXP panelsetup2SEXP, SEXP xSEXP, SEXP ySEXP, SEXP wi_j_starSEXP, SEXP inv_wi_j_starSEXP, SEXP wj_starSEXP, SEXP ttSEXP, SEXP DELTASEXP, SEXP invvjsSEXP, SEXP h_matrixSEXP, SEXP sSEXP, SEXP ssSEXP, SEXP nvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup2(panelsetup2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type inv_wi_j_star(inv_wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< int >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type DELTA(DELTASEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type invvjs(invvjsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type h_matrix(h_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    rcpp_result_gen = Rcpp::wrap(iterative_multi_theta(ncluster, beta, panelsetup2, x, y, wi_j_star, inv_wi_j_star, wj_star, tt, DELTA, invvjs, h_matrix, s, ss, nvar));
    return rcpp_result_gen;
END_RCPP
}
// multi_variances_residuals
Rcpp::List multi_variances_residuals(int nvar, int s, const Eigen::VectorXd beta, const Eigen::VectorXd theta, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const Eigen::VectorXd& z, const Eigen::VectorXd& wi_j_star, int ncluster, const Eigen::MatrixXd& panelsetup2, const Eigen::MatrixXd& R, const Eigen::MatrixXd& S, const Eigen::VectorXd& wj_star, int tt, const Eigen::MatrixXd& theta_1, const Eigen::MatrixXd& theta_matrix, int nsubjc_t, double theta1);
RcppExport SEXP _pwlmm_multi_variances_residuals(SEXP nvarSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP wi_j_starSEXP, SEXP nclusterSEXP, SEXP panelsetup2SEXP, SEXP RSEXP, SEXP SSEXP, SEXP wj_starSEXP, SEXP ttSEXP, SEXP theta_1SEXP, SEXP theta_matrixSEXP, SEXP nsubjc_tSEXP, SEXP theta1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup2(panelsetup2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< int >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type theta_1(theta_1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type theta_matrix(theta_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type nsubjc_t(nsubjc_tSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    rcpp_result_gen = Rcpp::wrap(multi_variances_residuals(nvar, s, beta, theta, y, x, z, wi_j_star, ncluster, panelsetup2, R, S, wj_star, tt, theta_1, theta_matrix, nsubjc_t, theta1));
    return rcpp_result_gen;
END_RCPP
}
// tjs_uni_beta
Rcpp::List tjs_uni_beta(int p, int m, const Eigen::MatrixXd& panelsetup, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, const Eigen::MatrixXd& z, const Eigen::VectorXd& wi_j_star, int q, int s, const Eigen::MatrixXd& H, const Eigen::VectorXd& wj_star);
RcppExport SEXP _pwlmm_tjs_uni_beta(SEXP pSEXP, SEXP mSEXP, SEXP panelsetupSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP wi_j_starSEXP, SEXP qSEXP, SEXP sSEXP, SEXP HSEXP, SEXP wj_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup(panelsetupSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    rcpp_result_gen = Rcpp::wrap(tjs_uni_beta(p, m, panelsetup, x, y, z, wi_j_star, q, s, H, wj_star));
    return rcpp_result_gen;
END_RCPP
}
// iterative_uni_beta
Rcpp::List iterative_uni_beta(int nvar, int ncluster, const Eigen::MatrixXd& tsit, const std::vector<Eigen::MatrixXd>& T1, const std::vector<Eigen::MatrixXd>& T2, const std::vector<Eigen::VectorXd>& T3, const std::vector<Eigen::VectorXd>& T4, const std::vector<Eigen::MatrixXd>& T5, const Eigen::VectorXd& wj_star);
RcppExport SEXP _pwlmm_iterative_uni_beta(SEXP nvarSEXP, SEXP nclusterSEXP, SEXP tsitSEXP, SEXP T1SEXP, SEXP T2SEXP, SEXP T3SEXP, SEXP T4SEXP, SEXP T5SEXP, SEXP wj_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tsit(tsitSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T1(T1SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T2(T2SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::VectorXd>& >::type T3(T3SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::VectorXd>& >::type T4(T4SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T5(T5SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    rcpp_result_gen = Rcpp::wrap(iterative_uni_beta(nvar, ncluster, tsit, T1, T2, T3, T4, T5, wj_star));
    return rcpp_result_gen;
END_RCPP
}
// iterative_uni_theta
Rcpp::List iterative_uni_theta(int s, int nvar, int ncluster, const Eigen::MatrixXd& sit, const Eigen::MatrixXd& tsit, const Eigen::MatrixXd& panelsetup, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const Eigen::MatrixXd& z, int q, const Eigen::VectorXd& beta, const Eigen::VectorXd& wj_star, double theta_s, const std::vector<Eigen::MatrixXd>& AJS, const std::vector<Eigen::MatrixXd>& T5, const Eigen::VectorXd& wi_j_star, const std::vector<Eigen::MatrixXd>& H_K, const std::vector<double>& TR_T5_HK, const std::vector<Eigen::MatrixXd>& T5_HK);
RcppExport SEXP _pwlmm_iterative_uni_theta(SEXP sSEXP, SEXP nvarSEXP, SEXP nclusterSEXP, SEXP sitSEXP, SEXP tsitSEXP, SEXP panelsetupSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP betaSEXP, SEXP wj_starSEXP, SEXP theta_sSEXP, SEXP AJSSEXP, SEXP T5SEXP, SEXP wi_j_starSEXP, SEXP H_KSEXP, SEXP TR_T5_HKSEXP, SEXP T5_HKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sit(sitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tsit(tsitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup(panelsetupSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< double >::type theta_s(theta_sSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type AJS(AJSSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T5(T5SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type H_K(H_KSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type TR_T5_HK(TR_T5_HKSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T5_HK(T5_HKSEXP);
    rcpp_result_gen = Rcpp::wrap(iterative_uni_theta(s, nvar, ncluster, sit, tsit, panelsetup, y, x, z, q, beta, wj_star, theta_s, AJS, T5, wi_j_star, H_K, TR_T5_HK, T5_HK));
    return rcpp_result_gen;
END_RCPP
}
// scaled_weight
Rcpp::List scaled_weight(int n, int m, const Eigen::MatrixXd& panelsetup, const Eigen::VectorXd& wi_j, const Eigen::VectorXd& wj);
RcppExport SEXP _pwlmm_scaled_weight(SEXP nSEXP, SEXP mSEXP, SEXP panelsetupSEXP, SEXP wi_jSEXP, SEXP wjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup(panelsetupSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j(wi_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj(wjSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_weight(n, m, panelsetup, wi_j, wj));
    return rcpp_result_gen;
END_RCPP
}
// initial_theta
Rcpp::List initial_theta(const Eigen::VectorXd& beta0, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, int ncluster, const Eigen::MatrixXd& panelsetup, const Eigen::VectorXd& wi_j_star, const Eigen::VectorXd& wj_star, int nvar);
RcppExport SEXP _pwlmm_initial_theta(SEXP beta0SEXP, SEXP xSEXP, SEXP ySEXP, SEXP nclusterSEXP, SEXP panelsetupSEXP, SEXP wi_j_starSEXP, SEXP wj_starSEXP, SEXP nvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup(panelsetupSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_theta(beta0, x, y, ncluster, panelsetup, wi_j_star, wj_star, nvar));
    return rcpp_result_gen;
END_RCPP
}
// uni_variances_residuals
Rcpp::List uni_variances_residuals(int nvar, int s, const Eigen::VectorXd beta, const Eigen::VectorXd theta, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, int ncluster, const Eigen::MatrixXd& panelsetup, const std::vector<Eigen::MatrixXd>& T2, const std::vector<Eigen::MatrixXd>& T5, const Eigen::VectorXd& wj_star, const Eigen::MatrixXd& sit, int nsubjc_t, int q, const Eigen::MatrixXd& z, const Eigen::MatrixXd& Sigmau, double theta_s, const Eigen::VectorXd& wi_j_star, const std::vector<Eigen::MatrixXd>& H_K, const std::vector<double>& TR_T5_HK, const std::vector<Eigen::MatrixXd>& T5_HK);
RcppExport SEXP _pwlmm_uni_variances_residuals(SEXP nvarSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP nclusterSEXP, SEXP panelsetupSEXP, SEXP T2SEXP, SEXP T5SEXP, SEXP wj_starSEXP, SEXP sitSEXP, SEXP nsubjc_tSEXP, SEXP qSEXP, SEXP zSEXP, SEXP SigmauSEXP, SEXP theta_sSEXP, SEXP wi_j_starSEXP, SEXP H_KSEXP, SEXP TR_T5_HKSEXP, SEXP T5_HKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type panelsetup(panelsetupSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T2(T2SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T5(T5SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sit(sitSEXP);
    Rcpp::traits::input_parameter< int >::type nsubjc_t(nsubjc_tSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigmau(SigmauSEXP);
    Rcpp::traits::input_parameter< double >::type theta_s(theta_sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type H_K(H_KSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type TR_T5_HK(TR_T5_HKSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type T5_HK(T5_HKSEXP);
    rcpp_result_gen = Rcpp::wrap(uni_variances_residuals(nvar, s, beta, theta, y, x, ncluster, panelsetup, T2, T5, wj_star, sit, nsubjc_t, q, z, Sigmau, theta_s, wi_j_star, H_K, TR_T5_HK, T5_HK));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pwlmm_invvech_eigen", (DL_FUNC) &_pwlmm_invvech_eigen, 1},
    {"_pwlmm_blkdiag", (DL_FUNC) &_pwlmm_blkdiag, 2},
    {"_pwlmm_initial_beta", (DL_FUNC) &_pwlmm_initial_beta, 7},
    {"_pwlmm_iterative_multi_beta", (DL_FUNC) &_pwlmm_iterative_multi_beta, 11},
    {"_pwlmm_iterative_multi_theta", (DL_FUNC) &_pwlmm_iterative_multi_theta, 15},
    {"_pwlmm_multi_variances_residuals", (DL_FUNC) &_pwlmm_multi_variances_residuals, 18},
    {"_pwlmm_tjs_uni_beta", (DL_FUNC) &_pwlmm_tjs_uni_beta, 11},
    {"_pwlmm_iterative_uni_beta", (DL_FUNC) &_pwlmm_iterative_uni_beta, 9},
    {"_pwlmm_iterative_uni_theta", (DL_FUNC) &_pwlmm_iterative_uni_theta, 19},
    {"_pwlmm_scaled_weight", (DL_FUNC) &_pwlmm_scaled_weight, 5},
    {"_pwlmm_initial_theta", (DL_FUNC) &_pwlmm_initial_theta, 8},
    {"_pwlmm_uni_variances_residuals", (DL_FUNC) &_pwlmm_uni_variances_residuals, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_pwlmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
